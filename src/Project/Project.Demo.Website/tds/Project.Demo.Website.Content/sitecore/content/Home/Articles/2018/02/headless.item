----item----
version: 1
id: {BC2AF59C-5113-4A38-B7F7-E978FE961E0B}
database: master
path: /sitecore/content/Home/Articles/2018/02/Headless CMS as a Microservice
parent: {69E0EA8F-6851-40BE-9CFE-D5D56863BC8D}
name: Headless CMS as a Microservice
master: {00000000-0000-0000-0000-000000000000}
template: {DCE93757-77A5-4B68-A276-227CFB6960F4}
templatekey: Article
created: 20190114T213017Z

----version----
language: en
version: 1
revision: dfe6742c-ddb1-4d03-92ea-5b3b54c0ab06

----field----
field: {42F95762-2E8F-4AA7-94D4-A35D6626B7B9}
name: Article Type
key: article type
content-length: 38

{2E0A5A12-C0F0-4D4D-96ED-BC7F80B51E12}
----field----
field: {EC425F3B-1B12-48E2-A4CF-33DADEDA8465}
name: Display Date
key: display date
content-length: 16

20180202T000000Z
----field----
field: {2AEE6781-8B14-4AAE-A50F-C5F03655984C}
name: Title
key: title
content-length: 30

Headless CMS as a Microservice
----field----
field: {FFA57B49-7D8B-41B8-AEB5-62EAF164F9B7}
name: Description
key: description
content-length: 1661

<p>As a Software House that develops a lot of B2C and B2B systems, we have to deal with content management systems on a daily basis. We use the most popular CMS/DXP solutions like LifeRay or Sitecore. These products offer great functionalities and experience for content creators and marketing. But they also heavily affect our systems architecture and usually tightly couple our solution to the chosen CMS. Also, our customers have to deal with this kind of heavy and strong dependency.</p>
<p>Do we have any viable alternatives? With the rising popularity of microservices and API-first approaches comes a new and popular solution &ndash; Headless CMS.</p>
<p>In this article, we will guide you through the process of integrating two open source CMS solutions with our sample Micronaut-based microservice sales portal, with a Single Page Application client written in Vue.js.</p>
<p>What Is a Headless CMS?</p>
<p>A Headless CMS is a backend only content management system which works as a content repository and gives access to this content via REST (or GraphQL) services.</p>
<p>In traditional CMS, you have the following core subsystems:</p>
<p>&nbsp;</p>
<ul>
<li>Content creation and management.</li>
<li>Publication workflow.</li>
<li>Content delivery.</li>
<li>Analysis and monitoring.</li>
</ul>
<p>&nbsp;</p>
<p>Headless CMS focuses just on content creation and publication workflow. It is your application's responsibility to get the content and display it in appropriate way based on your users' needs, devices they use, and channels they operate on.</p>
<p>You can checkout a list of popular open and closed source Headless CMS solutions here.</p>
----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 16

20190114T213017Z
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

dfe6742c-ddb1-4d03-92ea-5b3b54c0ab06
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 16

20190114T213043Z
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 14

sitecore\admin
