----item----
version: 1
id: {D1C66677-49A6-43E7-875A-872C03F4B038}
database: master
path: /sitecore/content/Home/Articles/2019/01/Sitecore JavaScript Services - Customizing Scaffolding of Components
parent: {2EDB6177-75F9-4852-9307-671A96FC9335}
name: Sitecore JavaScript Services - Customizing Scaffolding of Components
master: {00000000-0000-0000-0000-000000000000}
template: {DCE93757-77A5-4B68-A276-227CFB6960F4}
templatekey: Article
created: 20190205T140830Z

----version----
language: en
version: 1
revision: 01e28d5b-2fff-4237-a04e-66db6ca2fc64

----field----
field: {42F95762-2E8F-4AA7-94D4-A35D6626B7B9}
name: Article Type
key: article type
content-length: 38

{E4BF1B57-1135-45AD-8C23-8E4FE29B9B15}
----field----
field: {EC425F3B-1B12-48E2-A4CF-33DADEDA8465}
name: Display Date
key: display date
content-length: 15

20190130T000000
----field----
field: {917E43EE-4138-427A-8297-C11F04C31EC2}
name: Link
key: link
content-length: 69

<link target="_blank" url="http://syndicator/" linktype="external" />
----field----
field: {2AEE6781-8B14-4AAE-A50F-C5F03655984C}
name: Title
key: title
content-length: 68

Sitecore JavaScript Services - Customizing Scaffolding of Components
----field----
field: {FFA57B49-7D8B-41B8-AEB5-62EAF164F9B7}
name: Description
key: description
content-length: 19223

<p>This post explores customizing the <code>jss scaffold</code> command. This post is part of a series on learning to work with Sitecore JavaScript Services (JSS).</p><p>When I followed the ‚ÄúGetting Started‚Äù guide from JSS Documentation to learn how to create new components, there was one section in the docs that caught my eye:<br><a href="https://jss.sitecore.com/docs/getting-started/first-component#scaffolding-a-jss-component" target="_blank" rel="noopener">Your First Component | Sitecore JSS Documentation</a></p><blockquote><p>Scaffolding a JSS Component<br>JSS‚Äô sample apps include a script that allows you to easily scaffold new JSS components. The script is run like so:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jss scaffold &lt;componentname&gt;</span><br></pre></td></tr></table></figure><blockquote><p>This script is a completely customizable boilerplate (_scripts_scaffold-component.js) if you don‚Äôt like the default scaffolding conventions. Take it and make it yours!</p></blockquote><a id="more"></a><p>My demo site is using React, and by default, this command creates a boilerplate functional component.</p><p>src/components/NewComponents/index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Text &#125; <span class="keyword">from</span> <span class="string">"@sitecore-jss/sitecore-jss-react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NewComponent = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;NewComponent Component&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Text field=&#123;props.fields.heading&#125; /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default NewComponent;</span></span><br></pre></td></tr></table></figure></p><h2 id="Finding-the-command-definition"><a href="#Finding-the-command-definition" class="headerlink" title="Finding the command definition"></a>Finding the command definition</h2><p>To figure out how this command works under the hood, I checked <code>package.json</code> for the command definition:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "scaffold": "node scripts/scaffold-component.js",</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You may assume that the implementation for <code>jss scaffold</code> is defined inside JSS code since it‚Äôs a JSS command. On the contrary, <code>package.json</code> reveals that all the magic is defined inside <code>/scripts/scaffold-component.js</code> , which is a script that gets scaffolded as part of the starter app. This means that we have complete power to customize everything about this command.</p><h2 id="Default-Behavior"><a href="#Default-Behavior" class="headerlink" title="Default Behavior"></a>Default Behavior</h2><h3 id="1-Input-validation"><a href="#1-Input-validation" class="headerlink" title="1. Input validation"></a>1. Input validation</h3><p>The out-of-the-box implementation of <code>jss scaffold</code> does some validation on the <componentname> input</componentname></p><p>scripts/scaffold-component.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> componentName = process.argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!componentName) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"Component name was not passed. Usage: jss scaffold &lt;ComponentName&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="regexp">/^[A-Z][A-Za-z0-9-]+$/</span>.test(componentName)) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"Component name should start with an uppercase letter and contain only letters and numbers."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>It ensures the name is not an empty string</li><li>It ensures the name is Pascal cased</li><li>It ensures the name only contains letters, numbers, or dashes</li></ul><p>If you want to do additional validation or enforce a certain naming convention on new components, you could do it here.</p><h3 id="2-File-generation"><a href="#2-File-generation" class="headerlink" title="2. File generation"></a>2. File generation</h3><p>The script calls <code>scaffoldManifest()</code> and <code>scaffoldComponent()</code> to generate a manifest file and component file for the new component, respectively. Both of these are local functions, and they utilize string interpolation for the file content generation. As we‚Äôll see in the next section, this setup makes the file generation very easy to customize.</p><h2 id="Customizing-generation-of-new-components"><a href="#Customizing-generation-of-new-components" class="headerlink" title="Customizing generation of new components"></a>Customizing generation of new components</h2><p>In the React world, it‚Äôs common to use ‚Äúsnippets‚Äù libraries to create new components from a set of boilerplate options. For example, if you know your component will need to hook into lifecycle methods, then you can use a class component snippet (until <a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">React Hooks</a> go live, which is early Feb apparently üëè, then functional components all the way! üòâ). This is a popular VSCode plugin for React snippets - <a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets#user-content-react-components" target="_blank" rel="noopener">ES7 React/Redux/GraphQL/React-Native snippets - Visual Studio Marketplace</a>. Other front-end frameworks have similar plugins.</p><p>It‚Äôs ok if you‚Äôre not familiar with snippets libraries. The TLDR is that they enable you with a set of shortcut commands, like <code>rcc</code> (for React class component) and <code>rfc</code> (for React functional component), and you just type these shortcuts into a file in VSCode to create your boilerplate.</p><p>I thought it would be helpful to introduce a similar concept to the <code>jss scaffold</code> command via flags. So, my goal was to expose a set of component templates instead of just one, and let the developer choose which one to use at scaffold time.</p><p>I modified the default script to look for a <code>‚Äîtemplate:&lt;name&gt;</code> flag in the command invocation, where <name> is the template name (Ex. <code>‚Äîtemplate:rcc</code>, <code>‚Äîtemplate:rfc</code> ). The component name and template name are passed to a helper in an external file to figure out what content to use for file generation.</name></p><p>scripts/scaffold-component.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getTemplate = <span class="built_in">require</span>(<span class="string">"./scaffold-templates"</span>).getTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Components can be created from different scaffolding templates.</span></span><br><span class="line"><span class="comment">Use flags when calling the `jss scaffold` command to speficiy which template to use.</span></span><br><span class="line"><span class="comment">Supported flags:</span></span><br><span class="line"><span class="comment">* --template=rfc - use template for react functional component</span></span><br><span class="line"><span class="comment">* --template=rcc - use template for react class component</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> template = process.argv.find(<span class="function"><span class="params">arg</span> =&gt;</span> arg.indexOf(<span class="string">"--template"</span>) === <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (template) &#123;</span><br><span class="line">  template = template.split(<span class="string">"="</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> componentOutputPath = scaffoldComponent(</span><br><span class="line">  getTemplate(componentName, template)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scaffoldComponent</span>(<span class="params">componentTemplate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> outputDirectoryPath = path.join(componentRootPath, componentName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(outputDirectoryPath)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">`Component path <span class="subst">$&#123;outputDirectoryPath&#125;</span> already existed. Not creating component.`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.mkdirSync(outputDirectoryPath);</span><br><span class="line">  <span class="keyword">const</span> outputFilePath = path.join(outputDirectoryPath, <span class="string">"index.js"</span>);</span><br><span class="line">  fs.writeFileSync(outputFilePath, componentTemplate, <span class="string">"utf8"</span>);</span><br><span class="line">  <span class="keyword">return</span> outputFilePath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The external helper is just to make my set of templates easier to manage.</p><p>scripts/scaffold-templates.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.getTemplate = <span class="function">(<span class="params">componentName, template</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> exportVarName = componentName.replace(<span class="regexp">/[^\w]+/g</span>, <span class="string">""</span>);</span><br><span class="line">  <span class="keyword">const</span> templates = &#123;</span><br><span class="line">    <span class="comment">// Template for React Class Component</span></span><br><span class="line">    rcc: <span class="string">`import React, &#123; Component &#125; from 'react';</span></span><br><span class="line"><span class="string">import &#123; Text &#125; from '@sitecore-jss/sitecore-jss-react';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default class <span class="subst">$&#123;exportVarName&#125;</span> extends Component &#123;</span></span><br><span class="line"><span class="string">  render() &#123;</span></span><br><span class="line"><span class="string">    return &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;<span class="subst">$&#123;componentName&#125;</span> Component&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;Text field=&#123;this.props.fields.heading&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Template for React Functional Component</span></span><br><span class="line">    rfc: <span class="string">`import React from 'react';</span></span><br><span class="line"><span class="string">import &#123; Text &#125; from '@sitecore-jss/sitecore-jss-react';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const <span class="subst">$&#123;exportVarName&#125;</span> = (props) =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;<span class="subst">$&#123;componentName&#125;</span> Component&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;Text field=&#123;props.fields.heading&#125; /&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default <span class="subst">$&#123;exportVarName&#125;</span>;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (templates.hasOwnProperty(template)) &#123;</span><br><span class="line">    <span class="keyword">return</span> templates[template];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">"No component template or invalid template specified, using React Functional Component template."</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> templates.rfc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>View complete diff on GitHub: <a href="https://github.com/anastasiya29/jss-sandbox/commit/b64700157f0449542729ccaf2dd675c6a9c59e42#diff-61d12edc1cbcee5dc32e39567f301d84" target="_blank" rel="noopener">Add ability to use flag to specify whether new components should be s‚Ä¶ ¬∑ anastasiya29/jss-sandbox@b647001 ¬∑ GitHub</a></p><h2 id="Lessons-Learned"><a href="#Lessons-Learned" class="headerlink" title="Lessons Learned"></a>Lessons Learned</h2><ul><li>Templates for new components are managed by string interpolation</li><li>New flags can be added to any jss command to extend it with custom options</li></ul><h2 id="Try-It-Yourself"><a href="#Try-It-Yourself" class="headerlink" title="Try It Yourself"></a>Try It Yourself</h2><p>To experiment with this customization yourself, you can clone this code locally</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b topic/customize-component-scaffolding-templates https://github.com/anastasiya29/jss-sandbox.git</span><br></pre></td></tr></table></figure><p>Remember to install the <code>jss cli</code> if you haven‚Äôt already done so, and run <code>npm install</code> from the project root to download dependencies. After that you can start using the custom <code>jss scaffold</code> command.</p><p>Bon App√©tit!</p>
----field----
field: {52807595-0F8F-4B20-8D2A-CB71D28C6103}
name: __Owner
key: __owner
content-length: 18

extranet\Anonymous
----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 16

20190205T140830Z
----field----
field: {5DD74568-4D4B-44C1-B513-0AF5F4CDA34F}
name: __Created by
key: __created by
content-length: 18

extranet\Anonymous
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

01e28d5b-2fff-4237-a04e-66db6ca2fc64
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 16

20190205T140830Z
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 18

extranet\Anonymous
